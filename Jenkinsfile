pipeline {
    agent any

    environment {
        IMAGE_NAME = 'deepanshub9/health_jenkins_aiops'
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_CREDENTIALS = 'dockerhub'
        DOCKERHUB_API_URL = 'https://hub.docker.com/v2/repositories'
        EC2_HOST = '54.146.22.226' 
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                echo 'üîÑ Cloning GitHub repository...'
                git url: 'https://github.com/deepanshub9/health-tracker-jenkins-aiops.git', branch: 'main'
            }
        }

        stage('Build JAR)') {
            steps {
                echo '‚öôÔ∏è Building application (JAR) without running tests...'
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('Run Tests (Generated by GitHub Copilot)') {
            steps {
                echo 'ü§ñ Running unit tests generated with the help of GitHub Copilot (with H2 DB)...'
                withEnv(["DB_TYPE=h2"]) {
                    sh 'mvn test -Dmaven.test.failure.ignore=true'
                }
            }
        }

        stage('Generate Code Coverage Report (JaCoCo)') {
            steps {
                echo 'üìä Generating code coverage report using JaCoCo...'
                sh 'mvn jacoco:report'
            }
        }

        stage('Codacy Analysis (AI-Powered Code Quality)') {
            steps {
                echo 'üß† Sending coverage report to Codacy for AI-based code quality analysis...'
                withCredentials([string(credentialsId: 'codacy-token', variable: 'CODACY_PROJECT_TOKEN')]) {
                    sh '''
                        curl -Ls https://coverage.codacy.com/get.sh > codacy-coverage-reporter.sh
                        chmod +x codacy-coverage-reporter.sh
                        ./codacy-coverage-reporter.sh report -r target/site/jacoco/jacoco.xml || true
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker images...'
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                    docker.build("${IMAGE_NAME}:latest")
                }
            }
        }

        stage('Snyk Scan (AI-Powered Security)') {
            steps {
                echo 'üõ°Ô∏è Running Snyk AI security scan for code and Docker image...'
                withCredentials([string(credentialsId: 'synkcli', variable: 'SNYK_TOKEN')]) {
                    sh '''
                        snyk auth $SNYK_TOKEN
                        snyk test --all-projects --severity-threshold=high || true
                        snyk container test ${IMAGE_NAME}:latest || true
                    '''
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                echo 'üöÄ Pushing Docker image to Docker Hub...'
                withCredentials([string(credentialsId: 'dockerhub-pat', variable: 'DOCKERHUB_ACCESS_TOKEN')]) {
                    script {
                        docker.withRegistry(DOCKER_REGISTRY, DOCKER_CREDENTIALS) {
                            docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                            docker.image("${IMAGE_NAME}:latest").push()
                        }

                        echo 'üßπ Cleaning up older tags from Docker Hub...'
                        sh """
                        curl -s -X GET "${DOCKERHUB_API_URL}/${IMAGE_NAME}/tags?page_size=100" | \
                        jq -r '.results | sort_by(.last_updated) | reverse | .[3:] | .[].name' | \
                        xargs -I {} curl -X DELETE "${DOCKERHUB_API_URL}/${IMAGE_NAME}/tags/{}" \
                            --header "Authorization: Bearer ${DOCKERHUB_ACCESS_TOKEN}"
                        """
                    }
                }
            }
        }

        stage('Deploy to EC2 Instance') {
            steps {
                echo 'üì¶ Deploying Docker container on EC2...'
                sshagent(['ec2-ssh-credentials']) {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} <<EOF
echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
docker pull ${IMAGE_NAME}:latest

docker stop health_jenkins_aiops || true
docker rm health_jenkins_aiops || true
docker run -d -p 8001:8001 --name health_jenkins_aiops ${IMAGE_NAME}:latest
EOF
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üßΩ Cleaning workspace and Docker images...'
            sh 'docker image prune -a -f'
            junit 'target/surefire-reports/*.xml'
            jacoco execPattern: '**/target/jacoco.exec'
            cleanWs()
        }
    }
}
